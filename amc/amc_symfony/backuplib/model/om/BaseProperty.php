<?php

/**
 * Base class that represents a row from the 'property' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jun 17 22:51:27 2014
 *
 * @package    lib.model.om
 */
abstract class BaseProperty extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PropertyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the code field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $code;

	/**
	 * The value for the name field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the address field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the city field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $state_id;

	/**
	 * The value for the zip field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the phone field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the fax field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the email field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the image field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $image;

	/**
	 * The value for the url field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $url;

	/**
	 * The value for the price_range field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $price_range;

	/**
	 * The value for the unit_type field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $unit_type;

	/**
	 * The value for the special field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $special;

	/**
	 * The value for the mercial field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $mercial;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the hours field.
	 * @var        string
	 */
	protected $hours;

	/**
	 * The value for the pet_policy field.
	 * @var        string
	 */
	protected $pet_policy;

	/**
	 * The value for the directions field.
	 * @var        string
	 */
	protected $directions;

	/**
	 * The value for the featured field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $featured;

	/**
	 * The value for the status_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $status_id;

	/**
	 * @var        State
	 */
	protected $aState;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        array Contact[] Collection to store aggregation of Contact objects.
	 */
	protected $collContacts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collContacts.
	 */
	private $lastContactCriteria = null;

	/**
	 * @var        array PropertyApartmentFeature[] Collection to store aggregation of PropertyApartmentFeature objects.
	 */
	protected $collPropertyApartmentFeatures;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyApartmentFeatures.
	 */
	private $lastPropertyApartmentFeatureCriteria = null;

	/**
	 * @var        array PropertyCommunityFeature[] Collection to store aggregation of PropertyCommunityFeature objects.
	 */
	protected $collPropertyCommunityFeatures;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyCommunityFeatures.
	 */
	private $lastPropertyCommunityFeatureCriteria = null;

	/**
	 * @var        array PropertyFloorplan[] Collection to store aggregation of PropertyFloorplan objects.
	 */
	protected $collPropertyFloorplans;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyFloorplans.
	 */
	private $lastPropertyFloorplanCriteria = null;

	/**
	 * @var        array PropertyOtherFeature[] Collection to store aggregation of PropertyOtherFeature objects.
	 */
	protected $collPropertyOtherFeatures;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyOtherFeatures.
	 */
	private $lastPropertyOtherFeatureCriteria = null;

	/**
	 * @var        array PropertyPhoto[] Collection to store aggregation of PropertyPhoto objects.
	 */
	protected $collPropertyPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyPhotos.
	 */
	private $lastPropertyPhotoCriteria = null;

	/**
	 * @var        array PropertyBlogarticle[] Collection to store aggregation of PropertyBlogarticle objects.
	 */
	protected $collPropertyBlogarticles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyBlogarticles.
	 */
	private $lastPropertyBlogarticleCriteria = null;

	/**
	 * @var        array PropertyTemplate[] Collection to store aggregation of PropertyTemplate objects.
	 */
	protected $collPropertyTemplates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPropertyTemplates.
	 */
	private $lastPropertyTemplateCriteria = null;

	/**
	 * @var        array Resident[] Collection to store aggregation of Resident objects.
	 */
	protected $collResidents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResidents.
	 */
	private $lastResidentCriteria = null;

	/**
	 * @var        array UserProperty[] Collection to store aggregation of UserProperty objects.
	 */
	protected $collUserPropertys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserPropertys.
	 */
	private $lastUserPropertyCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PropertyPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->code = '';
		$this->name = '';
		$this->address = '';
		$this->city = '';
		$this->state_id = 0;
		$this->zip = '';
		$this->phone = '';
		$this->fax = '';
		$this->email = '';
		$this->image = '';
		$this->url = '';
		$this->price_range = '';
		$this->unit_type = '';
		$this->special = '';
		$this->mercial = '';
		$this->featured = false;
		$this->status_id = 0;
	}

	/**
	 * Initializes internal state of BaseProperty object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [code] column value.
	 * 
	 * @return     string
	 */
	public function getCode()
	{
		return $this->code;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state_id] column value.
	 * 
	 * @return     int
	 */
	public function getStateId()
	{
		return $this->state_id;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [image] column value.
	 * 
	 * @return     string
	 */
	public function getImage()
	{
		return $this->image;
	}

	/**
	 * Get the [url] column value.
	 * 
	 * @return     string
	 */
	public function getUrl()
	{
		return $this->url;
	}

	/**
	 * Get the [price_range] column value.
	 * 
	 * @return     string
	 */
	public function getPriceRange()
	{
		return $this->price_range;
	}

	/**
	 * Get the [unit_type] column value.
	 * 
	 * @return     string
	 */
	public function getUnitType()
	{
		return $this->unit_type;
	}

	/**
	 * Get the [special] column value.
	 * 
	 * @return     string
	 */
	public function getSpecial()
	{
		return $this->special;
	}

	/**
	 * Get the [mercial] column value.
	 * 
	 * @return     string
	 */
	public function getMercial()
	{
		return $this->mercial;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [hours] column value.
	 * 
	 * @return     string
	 */
	public function getHours()
	{
		return $this->hours;
	}

	/**
	 * Get the [pet_policy] column value.
	 * 
	 * @return     string
	 */
	public function getPetPolicy()
	{
		return $this->pet_policy;
	}

	/**
	 * Get the [directions] column value.
	 * 
	 * @return     string
	 */
	public function getDirections()
	{
		return $this->directions;
	}

	/**
	 * Get the [featured] column value.
	 * 
	 * @return     boolean
	 */
	public function getFeatured()
	{
		return $this->featured;
	}

	/**
	 * Get the [status_id] column value.
	 * 
	 * @return     int
	 */
	public function getStatusId()
	{
		return $this->status_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PropertyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [code] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->code !== $v || $this->isNew()) {
			$this->code = $v;
			$this->modifiedColumns[] = PropertyPeer::CODE;
		}

		return $this;
	} // setCode()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v || $this->isNew()) {
			$this->name = $v;
			$this->modifiedColumns[] = PropertyPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v || $this->isNew()) {
			$this->address = $v;
			$this->modifiedColumns[] = PropertyPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v || $this->isNew()) {
			$this->city = $v;
			$this->modifiedColumns[] = PropertyPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setStateId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state_id !== $v || $this->isNew()) {
			$this->state_id = $v;
			$this->modifiedColumns[] = PropertyPeer::STATE_ID;
		}

		if ($this->aState !== null && $this->aState->getId() !== $v) {
			$this->aState = null;
		}

		return $this;
	} // setStateId()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v || $this->isNew()) {
			$this->zip = $v;
			$this->modifiedColumns[] = PropertyPeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v || $this->isNew()) {
			$this->phone = $v;
			$this->modifiedColumns[] = PropertyPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v || $this->isNew()) {
			$this->fax = $v;
			$this->modifiedColumns[] = PropertyPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v || $this->isNew()) {
			$this->email = $v;
			$this->modifiedColumns[] = PropertyPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [image] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->image !== $v || $this->isNew()) {
			$this->image = $v;
			$this->modifiedColumns[] = PropertyPeer::IMAGE;
		}

		return $this;
	} // setImage()

	/**
	 * Set the value of [url] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->url !== $v || $this->isNew()) {
			$this->url = $v;
			$this->modifiedColumns[] = PropertyPeer::URL;
		}

		return $this;
	} // setUrl()

	/**
	 * Set the value of [price_range] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setPriceRange($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_range !== $v || $this->isNew()) {
			$this->price_range = $v;
			$this->modifiedColumns[] = PropertyPeer::PRICE_RANGE;
		}

		return $this;
	} // setPriceRange()

	/**
	 * Set the value of [unit_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setUnitType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->unit_type !== $v || $this->isNew()) {
			$this->unit_type = $v;
			$this->modifiedColumns[] = PropertyPeer::UNIT_TYPE;
		}

		return $this;
	} // setUnitType()

	/**
	 * Set the value of [special] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setSpecial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->special !== $v || $this->isNew()) {
			$this->special = $v;
			$this->modifiedColumns[] = PropertyPeer::SPECIAL;
		}

		return $this;
	} // setSpecial()

	/**
	 * Set the value of [mercial] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setMercial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mercial !== $v || $this->isNew()) {
			$this->mercial = $v;
			$this->modifiedColumns[] = PropertyPeer::MERCIAL;
		}

		return $this;
	} // setMercial()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = PropertyPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [hours] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setHours($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hours !== $v) {
			$this->hours = $v;
			$this->modifiedColumns[] = PropertyPeer::HOURS;
		}

		return $this;
	} // setHours()

	/**
	 * Set the value of [pet_policy] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setPetPolicy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pet_policy !== $v) {
			$this->pet_policy = $v;
			$this->modifiedColumns[] = PropertyPeer::PET_POLICY;
		}

		return $this;
	} // setPetPolicy()

	/**
	 * Set the value of [directions] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setDirections($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->directions !== $v) {
			$this->directions = $v;
			$this->modifiedColumns[] = PropertyPeer::DIRECTIONS;
		}

		return $this;
	} // setDirections()

	/**
	 * Set the value of [featured] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setFeatured($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->featured !== $v || $this->isNew()) {
			$this->featured = $v;
			$this->modifiedColumns[] = PropertyPeer::FEATURED;
		}

		return $this;
	} // setFeatured()

	/**
	 * Set the value of [status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_id !== $v || $this->isNew()) {
			$this->status_id = $v;
			$this->modifiedColumns[] = PropertyPeer::STATUS_ID;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setStatusId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->code !== '') {
				return false;
			}

			if ($this->name !== '') {
				return false;
			}

			if ($this->address !== '') {
				return false;
			}

			if ($this->city !== '') {
				return false;
			}

			if ($this->state_id !== 0) {
				return false;
			}

			if ($this->zip !== '') {
				return false;
			}

			if ($this->phone !== '') {
				return false;
			}

			if ($this->fax !== '') {
				return false;
			}

			if ($this->email !== '') {
				return false;
			}

			if ($this->image !== '') {
				return false;
			}

			if ($this->url !== '') {
				return false;
			}

			if ($this->price_range !== '') {
				return false;
			}

			if ($this->unit_type !== '') {
				return false;
			}

			if ($this->special !== '') {
				return false;
			}

			if ($this->mercial !== '') {
				return false;
			}

			if ($this->featured !== false) {
				return false;
			}

			if ($this->status_id !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->code = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->address = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->city = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->state_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->zip = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->phone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->fax = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->email = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->image = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->url = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->price_range = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->unit_type = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->special = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->mercial = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->description = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->hours = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->pet_policy = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->directions = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->featured = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->status_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = PropertyPeer::NUM_COLUMNS - PropertyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Property object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aState !== null && $this->state_id !== $this->aState->getId()) {
			$this->aState = null;
		}
		if ($this->aStatus !== null && $this->status_id !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PropertyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aState = null;
			$this->aStatus = null;
			$this->collContacts = null;
			$this->lastContactCriteria = null;

			$this->collPropertyApartmentFeatures = null;
			$this->lastPropertyApartmentFeatureCriteria = null;

			$this->collPropertyCommunityFeatures = null;
			$this->lastPropertyCommunityFeatureCriteria = null;

			$this->collPropertyFloorplans = null;
			$this->lastPropertyFloorplanCriteria = null;

			$this->collPropertyOtherFeatures = null;
			$this->lastPropertyOtherFeatureCriteria = null;

			$this->collPropertyPhotos = null;
			$this->lastPropertyPhotoCriteria = null;

			$this->collPropertyBlogarticles = null;
			$this->lastPropertyBlogarticleCriteria = null;

			$this->collPropertyTemplates = null;
			$this->lastPropertyTemplateCriteria = null;

			$this->collResidents = null;
			$this->lastResidentCriteria = null;

			$this->collUserPropertys = null;
			$this->lastUserPropertyCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProperty:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PropertyPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProperty:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProperty:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProperty:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PropertyPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aState !== null) {
				if ($this->aState->isModified() || $this->aState->isNew()) {
					$affectedRows += $this->aState->save($con);
				}
				$this->setState($this->aState);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PropertyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PropertyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PropertyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collContacts !== null) {
				foreach ($this->collContacts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyApartmentFeatures !== null) {
				foreach ($this->collPropertyApartmentFeatures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyCommunityFeatures !== null) {
				foreach ($this->collPropertyCommunityFeatures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyFloorplans !== null) {
				foreach ($this->collPropertyFloorplans as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyOtherFeatures !== null) {
				foreach ($this->collPropertyOtherFeatures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyPhotos !== null) {
				foreach ($this->collPropertyPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyBlogarticles !== null) {
				foreach ($this->collPropertyBlogarticles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPropertyTemplates !== null) {
				foreach ($this->collPropertyTemplates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResidents !== null) {
				foreach ($this->collResidents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserPropertys !== null) {
				foreach ($this->collUserPropertys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aState !== null) {
				if (!$this->aState->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aState->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}


			if (($retval = PropertyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collContacts !== null) {
					foreach ($this->collContacts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyApartmentFeatures !== null) {
					foreach ($this->collPropertyApartmentFeatures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyCommunityFeatures !== null) {
					foreach ($this->collPropertyCommunityFeatures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyFloorplans !== null) {
					foreach ($this->collPropertyFloorplans as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyOtherFeatures !== null) {
					foreach ($this->collPropertyOtherFeatures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyPhotos !== null) {
					foreach ($this->collPropertyPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyBlogarticles !== null) {
					foreach ($this->collPropertyBlogarticles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPropertyTemplates !== null) {
					foreach ($this->collPropertyTemplates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResidents !== null) {
					foreach ($this->collResidents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserPropertys !== null) {
					foreach ($this->collUserPropertys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCode();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getAddress();
				break;
			case 4:
				return $this->getCity();
				break;
			case 5:
				return $this->getStateId();
				break;
			case 6:
				return $this->getZip();
				break;
			case 7:
				return $this->getPhone();
				break;
			case 8:
				return $this->getFax();
				break;
			case 9:
				return $this->getEmail();
				break;
			case 10:
				return $this->getImage();
				break;
			case 11:
				return $this->getUrl();
				break;
			case 12:
				return $this->getPriceRange();
				break;
			case 13:
				return $this->getUnitType();
				break;
			case 14:
				return $this->getSpecial();
				break;
			case 15:
				return $this->getMercial();
				break;
			case 16:
				return $this->getDescription();
				break;
			case 17:
				return $this->getHours();
				break;
			case 18:
				return $this->getPetPolicy();
				break;
			case 19:
				return $this->getDirections();
				break;
			case 20:
				return $this->getFeatured();
				break;
			case 21:
				return $this->getStatusId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PropertyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCode(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getAddress(),
			$keys[4] => $this->getCity(),
			$keys[5] => $this->getStateId(),
			$keys[6] => $this->getZip(),
			$keys[7] => $this->getPhone(),
			$keys[8] => $this->getFax(),
			$keys[9] => $this->getEmail(),
			$keys[10] => $this->getImage(),
			$keys[11] => $this->getUrl(),
			$keys[12] => $this->getPriceRange(),
			$keys[13] => $this->getUnitType(),
			$keys[14] => $this->getSpecial(),
			$keys[15] => $this->getMercial(),
			$keys[16] => $this->getDescription(),
			$keys[17] => $this->getHours(),
			$keys[18] => $this->getPetPolicy(),
			$keys[19] => $this->getDirections(),
			$keys[20] => $this->getFeatured(),
			$keys[21] => $this->getStatusId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCode($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setAddress($value);
				break;
			case 4:
				$this->setCity($value);
				break;
			case 5:
				$this->setStateId($value);
				break;
			case 6:
				$this->setZip($value);
				break;
			case 7:
				$this->setPhone($value);
				break;
			case 8:
				$this->setFax($value);
				break;
			case 9:
				$this->setEmail($value);
				break;
			case 10:
				$this->setImage($value);
				break;
			case 11:
				$this->setUrl($value);
				break;
			case 12:
				$this->setPriceRange($value);
				break;
			case 13:
				$this->setUnitType($value);
				break;
			case 14:
				$this->setSpecial($value);
				break;
			case 15:
				$this->setMercial($value);
				break;
			case 16:
				$this->setDescription($value);
				break;
			case 17:
				$this->setHours($value);
				break;
			case 18:
				$this->setPetPolicy($value);
				break;
			case 19:
				$this->setDirections($value);
				break;
			case 20:
				$this->setFeatured($value);
				break;
			case 21:
				$this->setStatusId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PropertyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCode($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAddress($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCity($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setStateId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setZip($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPhone($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFax($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEmail($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setImage($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUrl($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPriceRange($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUnitType($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSpecial($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMercial($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDescription($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setHours($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPetPolicy($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDirections($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setFeatured($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setStatusId($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PropertyPeer::DATABASE_NAME);

		if ($this->isColumnModified(PropertyPeer::ID)) $criteria->add(PropertyPeer::ID, $this->id);
		if ($this->isColumnModified(PropertyPeer::CODE)) $criteria->add(PropertyPeer::CODE, $this->code);
		if ($this->isColumnModified(PropertyPeer::NAME)) $criteria->add(PropertyPeer::NAME, $this->name);
		if ($this->isColumnModified(PropertyPeer::ADDRESS)) $criteria->add(PropertyPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(PropertyPeer::CITY)) $criteria->add(PropertyPeer::CITY, $this->city);
		if ($this->isColumnModified(PropertyPeer::STATE_ID)) $criteria->add(PropertyPeer::STATE_ID, $this->state_id);
		if ($this->isColumnModified(PropertyPeer::ZIP)) $criteria->add(PropertyPeer::ZIP, $this->zip);
		if ($this->isColumnModified(PropertyPeer::PHONE)) $criteria->add(PropertyPeer::PHONE, $this->phone);
		if ($this->isColumnModified(PropertyPeer::FAX)) $criteria->add(PropertyPeer::FAX, $this->fax);
		if ($this->isColumnModified(PropertyPeer::EMAIL)) $criteria->add(PropertyPeer::EMAIL, $this->email);
		if ($this->isColumnModified(PropertyPeer::IMAGE)) $criteria->add(PropertyPeer::IMAGE, $this->image);
		if ($this->isColumnModified(PropertyPeer::URL)) $criteria->add(PropertyPeer::URL, $this->url);
		if ($this->isColumnModified(PropertyPeer::PRICE_RANGE)) $criteria->add(PropertyPeer::PRICE_RANGE, $this->price_range);
		if ($this->isColumnModified(PropertyPeer::UNIT_TYPE)) $criteria->add(PropertyPeer::UNIT_TYPE, $this->unit_type);
		if ($this->isColumnModified(PropertyPeer::SPECIAL)) $criteria->add(PropertyPeer::SPECIAL, $this->special);
		if ($this->isColumnModified(PropertyPeer::MERCIAL)) $criteria->add(PropertyPeer::MERCIAL, $this->mercial);
		if ($this->isColumnModified(PropertyPeer::DESCRIPTION)) $criteria->add(PropertyPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(PropertyPeer::HOURS)) $criteria->add(PropertyPeer::HOURS, $this->hours);
		if ($this->isColumnModified(PropertyPeer::PET_POLICY)) $criteria->add(PropertyPeer::PET_POLICY, $this->pet_policy);
		if ($this->isColumnModified(PropertyPeer::DIRECTIONS)) $criteria->add(PropertyPeer::DIRECTIONS, $this->directions);
		if ($this->isColumnModified(PropertyPeer::FEATURED)) $criteria->add(PropertyPeer::FEATURED, $this->featured);
		if ($this->isColumnModified(PropertyPeer::STATUS_ID)) $criteria->add(PropertyPeer::STATUS_ID, $this->status_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PropertyPeer::DATABASE_NAME);

		$criteria->add(PropertyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Property (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCode($this->code);

		$copyObj->setName($this->name);

		$copyObj->setAddress($this->address);

		$copyObj->setCity($this->city);

		$copyObj->setStateId($this->state_id);

		$copyObj->setZip($this->zip);

		$copyObj->setPhone($this->phone);

		$copyObj->setFax($this->fax);

		$copyObj->setEmail($this->email);

		$copyObj->setImage($this->image);

		$copyObj->setUrl($this->url);

		$copyObj->setPriceRange($this->price_range);

		$copyObj->setUnitType($this->unit_type);

		$copyObj->setSpecial($this->special);

		$copyObj->setMercial($this->mercial);

		$copyObj->setDescription($this->description);

		$copyObj->setHours($this->hours);

		$copyObj->setPetPolicy($this->pet_policy);

		$copyObj->setDirections($this->directions);

		$copyObj->setFeatured($this->featured);

		$copyObj->setStatusId($this->status_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getContacts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addContact($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyApartmentFeatures() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyApartmentFeature($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyCommunityFeatures() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyCommunityFeature($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyFloorplans() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyFloorplan($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyOtherFeatures() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyOtherFeature($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyPhoto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyBlogarticles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyBlogarticle($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPropertyTemplates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPropertyTemplate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResidents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResident($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserPropertys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserProperty($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Property Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PropertyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PropertyPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a State object.
	 *
	 * @param      State $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setState(State $v = null)
	{
		if ($v === null) {
			$this->setStateId(0);
		} else {
			$this->setStateId($v->getId());
		}

		$this->aState = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the State object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated State object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     State The associated State object.
	 * @throws     PropelException
	 */
	public function getState(PropelPDO $con = null)
	{
		if ($this->aState === null && ($this->state_id !== null)) {
			$this->aState = StatePeer::retrieveByPk($this->state_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aState->addPropertys($this);
			 */
		}
		return $this->aState;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setStatusId(0);
		} else {
			$this->setStatusId($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->status_id !== null)) {
			$this->aStatus = StatusPeer::retrieveByPk($this->status_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatus->addPropertys($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Clears out the collContacts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addContacts()
	 */
	public function clearContacts()
	{
		$this->collContacts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collContacts collection (array).
	 *
	 * By default this just sets the collContacts collection to an empty array (like clearcollContacts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initContacts()
	{
		$this->collContacts = array();
	}

	/**
	 * Gets an array of Contact objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related Contacts from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Contact[]
	 * @throws     PropelException
	 */
	public function getContacts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContacts === null) {
			if ($this->isNew()) {
			   $this->collContacts = array();
			} else {

				$criteria->add(ContactPeer::PROPERTY_ID, $this->id);

				ContactPeer::addSelectColumns($criteria);
				$this->collContacts = ContactPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ContactPeer::PROPERTY_ID, $this->id);

				ContactPeer::addSelectColumns($criteria);
				if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
					$this->collContacts = ContactPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastContactCriteria = $criteria;
		return $this->collContacts;
	}

	/**
	 * Returns the number of related Contact objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Contact objects.
	 * @throws     PropelException
	 */
	public function countContacts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collContacts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ContactPeer::PROPERTY_ID, $this->id);

				$count = ContactPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ContactPeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
					$count = ContactPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collContacts);
				}
			} else {
				$count = count($this->collContacts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Contact object to this object
	 * through the Contact foreign key attribute.
	 *
	 * @param      Contact $l Contact
	 * @return     void
	 * @throws     PropelException
	 */
	public function addContact(Contact $l)
	{
		if ($this->collContacts === null) {
			$this->initContacts();
		}
		if (!in_array($l, $this->collContacts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collContacts, $l);
			$l->setProperty($this);
		}
	}

	/**
	 * Clears out the collPropertyApartmentFeatures collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyApartmentFeatures()
	 */
	public function clearPropertyApartmentFeatures()
	{
		$this->collPropertyApartmentFeatures = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyApartmentFeatures collection (array).
	 *
	 * By default this just sets the collPropertyApartmentFeatures collection to an empty array (like clearcollPropertyApartmentFeatures());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyApartmentFeatures()
	{
		$this->collPropertyApartmentFeatures = array();
	}

	/**
	 * Gets an array of PropertyApartmentFeature objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyApartmentFeatures from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyApartmentFeature[]
	 * @throws     PropelException
	 */
	public function getPropertyApartmentFeatures($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyApartmentFeatures === null) {
			if ($this->isNew()) {
			   $this->collPropertyApartmentFeatures = array();
			} else {

				$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

				PropertyApartmentFeaturePeer::addSelectColumns($criteria);
				$this->collPropertyApartmentFeatures = PropertyApartmentFeaturePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

				PropertyApartmentFeaturePeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyApartmentFeatureCriteria) || !$this->lastPropertyApartmentFeatureCriteria->equals($criteria)) {
					$this->collPropertyApartmentFeatures = PropertyApartmentFeaturePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyApartmentFeatureCriteria = $criteria;
		return $this->collPropertyApartmentFeatures;
	}

	/**
	 * Returns the number of related PropertyApartmentFeature objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyApartmentFeature objects.
	 * @throws     PropelException
	 */
	public function countPropertyApartmentFeatures(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyApartmentFeatures === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

				$count = PropertyApartmentFeaturePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyApartmentFeatureCriteria) || !$this->lastPropertyApartmentFeatureCriteria->equals($criteria)) {
					$count = PropertyApartmentFeaturePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyApartmentFeatures);
				}
			} else {
				$count = count($this->collPropertyApartmentFeatures);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyApartmentFeature object to this object
	 * through the PropertyApartmentFeature foreign key attribute.
	 *
	 * @param      PropertyApartmentFeature $l PropertyApartmentFeature
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyApartmentFeature(PropertyApartmentFeature $l)
	{
		if ($this->collPropertyApartmentFeatures === null) {
			$this->initPropertyApartmentFeatures();
		}
		if (!in_array($l, $this->collPropertyApartmentFeatures, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyApartmentFeatures, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related PropertyApartmentFeatures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getPropertyApartmentFeaturesJoinApartmentFeature($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyApartmentFeatures === null) {
			if ($this->isNew()) {
				$this->collPropertyApartmentFeatures = array();
			} else {

				$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

				$this->collPropertyApartmentFeatures = PropertyApartmentFeaturePeer::doSelectJoinApartmentFeature($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PropertyApartmentFeaturePeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastPropertyApartmentFeatureCriteria) || !$this->lastPropertyApartmentFeatureCriteria->equals($criteria)) {
				$this->collPropertyApartmentFeatures = PropertyApartmentFeaturePeer::doSelectJoinApartmentFeature($criteria, $con, $join_behavior);
			}
		}
		$this->lastPropertyApartmentFeatureCriteria = $criteria;

		return $this->collPropertyApartmentFeatures;
	}

	/**
	 * Clears out the collPropertyCommunityFeatures collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyCommunityFeatures()
	 */
	public function clearPropertyCommunityFeatures()
	{
		$this->collPropertyCommunityFeatures = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyCommunityFeatures collection (array).
	 *
	 * By default this just sets the collPropertyCommunityFeatures collection to an empty array (like clearcollPropertyCommunityFeatures());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyCommunityFeatures()
	{
		$this->collPropertyCommunityFeatures = array();
	}

	/**
	 * Gets an array of PropertyCommunityFeature objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyCommunityFeatures from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyCommunityFeature[]
	 * @throws     PropelException
	 */
	public function getPropertyCommunityFeatures($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyCommunityFeatures === null) {
			if ($this->isNew()) {
			   $this->collPropertyCommunityFeatures = array();
			} else {

				$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

				PropertyCommunityFeaturePeer::addSelectColumns($criteria);
				$this->collPropertyCommunityFeatures = PropertyCommunityFeaturePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

				PropertyCommunityFeaturePeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyCommunityFeatureCriteria) || !$this->lastPropertyCommunityFeatureCriteria->equals($criteria)) {
					$this->collPropertyCommunityFeatures = PropertyCommunityFeaturePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyCommunityFeatureCriteria = $criteria;
		return $this->collPropertyCommunityFeatures;
	}

	/**
	 * Returns the number of related PropertyCommunityFeature objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyCommunityFeature objects.
	 * @throws     PropelException
	 */
	public function countPropertyCommunityFeatures(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyCommunityFeatures === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

				$count = PropertyCommunityFeaturePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyCommunityFeatureCriteria) || !$this->lastPropertyCommunityFeatureCriteria->equals($criteria)) {
					$count = PropertyCommunityFeaturePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyCommunityFeatures);
				}
			} else {
				$count = count($this->collPropertyCommunityFeatures);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyCommunityFeature object to this object
	 * through the PropertyCommunityFeature foreign key attribute.
	 *
	 * @param      PropertyCommunityFeature $l PropertyCommunityFeature
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyCommunityFeature(PropertyCommunityFeature $l)
	{
		if ($this->collPropertyCommunityFeatures === null) {
			$this->initPropertyCommunityFeatures();
		}
		if (!in_array($l, $this->collPropertyCommunityFeatures, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyCommunityFeatures, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related PropertyCommunityFeatures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getPropertyCommunityFeaturesJoinCommunityFeature($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyCommunityFeatures === null) {
			if ($this->isNew()) {
				$this->collPropertyCommunityFeatures = array();
			} else {

				$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

				$this->collPropertyCommunityFeatures = PropertyCommunityFeaturePeer::doSelectJoinCommunityFeature($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PropertyCommunityFeaturePeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastPropertyCommunityFeatureCriteria) || !$this->lastPropertyCommunityFeatureCriteria->equals($criteria)) {
				$this->collPropertyCommunityFeatures = PropertyCommunityFeaturePeer::doSelectJoinCommunityFeature($criteria, $con, $join_behavior);
			}
		}
		$this->lastPropertyCommunityFeatureCriteria = $criteria;

		return $this->collPropertyCommunityFeatures;
	}

	/**
	 * Clears out the collPropertyFloorplans collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyFloorplans()
	 */
	public function clearPropertyFloorplans()
	{
		$this->collPropertyFloorplans = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyFloorplans collection (array).
	 *
	 * By default this just sets the collPropertyFloorplans collection to an empty array (like clearcollPropertyFloorplans());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyFloorplans()
	{
		$this->collPropertyFloorplans = array();
	}

	/**
	 * Gets an array of PropertyFloorplan objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyFloorplans from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyFloorplan[]
	 * @throws     PropelException
	 */
	public function getPropertyFloorplans($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyFloorplans === null) {
			if ($this->isNew()) {
			   $this->collPropertyFloorplans = array();
			} else {

				$criteria->add(PropertyFloorplanPeer::PROPERTY_ID, $this->id);

				PropertyFloorplanPeer::addSelectColumns($criteria);
				$this->collPropertyFloorplans = PropertyFloorplanPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyFloorplanPeer::PROPERTY_ID, $this->id);

				PropertyFloorplanPeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyFloorplanCriteria) || !$this->lastPropertyFloorplanCriteria->equals($criteria)) {
					$this->collPropertyFloorplans = PropertyFloorplanPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyFloorplanCriteria = $criteria;
		return $this->collPropertyFloorplans;
	}

	/**
	 * Returns the number of related PropertyFloorplan objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyFloorplan objects.
	 * @throws     PropelException
	 */
	public function countPropertyFloorplans(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyFloorplans === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyFloorplanPeer::PROPERTY_ID, $this->id);

				$count = PropertyFloorplanPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyFloorplanPeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyFloorplanCriteria) || !$this->lastPropertyFloorplanCriteria->equals($criteria)) {
					$count = PropertyFloorplanPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyFloorplans);
				}
			} else {
				$count = count($this->collPropertyFloorplans);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyFloorplan object to this object
	 * through the PropertyFloorplan foreign key attribute.
	 *
	 * @param      PropertyFloorplan $l PropertyFloorplan
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyFloorplan(PropertyFloorplan $l)
	{
		if ($this->collPropertyFloorplans === null) {
			$this->initPropertyFloorplans();
		}
		if (!in_array($l, $this->collPropertyFloorplans, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyFloorplans, $l);
			$l->setProperty($this);
		}
	}

	/**
	 * Clears out the collPropertyOtherFeatures collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyOtherFeatures()
	 */
	public function clearPropertyOtherFeatures()
	{
		$this->collPropertyOtherFeatures = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyOtherFeatures collection (array).
	 *
	 * By default this just sets the collPropertyOtherFeatures collection to an empty array (like clearcollPropertyOtherFeatures());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyOtherFeatures()
	{
		$this->collPropertyOtherFeatures = array();
	}

	/**
	 * Gets an array of PropertyOtherFeature objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyOtherFeatures from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyOtherFeature[]
	 * @throws     PropelException
	 */
	public function getPropertyOtherFeatures($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyOtherFeatures === null) {
			if ($this->isNew()) {
			   $this->collPropertyOtherFeatures = array();
			} else {

				$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

				PropertyOtherFeaturePeer::addSelectColumns($criteria);
				$this->collPropertyOtherFeatures = PropertyOtherFeaturePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

				PropertyOtherFeaturePeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyOtherFeatureCriteria) || !$this->lastPropertyOtherFeatureCriteria->equals($criteria)) {
					$this->collPropertyOtherFeatures = PropertyOtherFeaturePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyOtherFeatureCriteria = $criteria;
		return $this->collPropertyOtherFeatures;
	}

	/**
	 * Returns the number of related PropertyOtherFeature objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyOtherFeature objects.
	 * @throws     PropelException
	 */
	public function countPropertyOtherFeatures(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyOtherFeatures === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

				$count = PropertyOtherFeaturePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyOtherFeatureCriteria) || !$this->lastPropertyOtherFeatureCriteria->equals($criteria)) {
					$count = PropertyOtherFeaturePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyOtherFeatures);
				}
			} else {
				$count = count($this->collPropertyOtherFeatures);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyOtherFeature object to this object
	 * through the PropertyOtherFeature foreign key attribute.
	 *
	 * @param      PropertyOtherFeature $l PropertyOtherFeature
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyOtherFeature(PropertyOtherFeature $l)
	{
		if ($this->collPropertyOtherFeatures === null) {
			$this->initPropertyOtherFeatures();
		}
		if (!in_array($l, $this->collPropertyOtherFeatures, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyOtherFeatures, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related PropertyOtherFeatures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getPropertyOtherFeaturesJoinOtherFeature($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyOtherFeatures === null) {
			if ($this->isNew()) {
				$this->collPropertyOtherFeatures = array();
			} else {

				$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

				$this->collPropertyOtherFeatures = PropertyOtherFeaturePeer::doSelectJoinOtherFeature($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PropertyOtherFeaturePeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastPropertyOtherFeatureCriteria) || !$this->lastPropertyOtherFeatureCriteria->equals($criteria)) {
				$this->collPropertyOtherFeatures = PropertyOtherFeaturePeer::doSelectJoinOtherFeature($criteria, $con, $join_behavior);
			}
		}
		$this->lastPropertyOtherFeatureCriteria = $criteria;

		return $this->collPropertyOtherFeatures;
	}

	/**
	 * Clears out the collPropertyPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyPhotos()
	 */
	public function clearPropertyPhotos()
	{
		$this->collPropertyPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyPhotos collection (array).
	 *
	 * By default this just sets the collPropertyPhotos collection to an empty array (like clearcollPropertyPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyPhotos()
	{
		$this->collPropertyPhotos = array();
	}

	/**
	 * Gets an array of PropertyPhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyPhotos from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyPhoto[]
	 * @throws     PropelException
	 */
	public function getPropertyPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyPhotos === null) {
			if ($this->isNew()) {
			   $this->collPropertyPhotos = array();
			} else {

				$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

				PropertyPhotoPeer::addSelectColumns($criteria);
				$this->collPropertyPhotos = PropertyPhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

				PropertyPhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyPhotoCriteria) || !$this->lastPropertyPhotoCriteria->equals($criteria)) {
					$this->collPropertyPhotos = PropertyPhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyPhotoCriteria = $criteria;
		return $this->collPropertyPhotos;
	}

	/**
	 * Returns the number of related PropertyPhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyPhoto objects.
	 * @throws     PropelException
	 */
	public function countPropertyPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

				$count = PropertyPhotoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyPhotoCriteria) || !$this->lastPropertyPhotoCriteria->equals($criteria)) {
					$count = PropertyPhotoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyPhotos);
				}
			} else {
				$count = count($this->collPropertyPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyPhoto object to this object
	 * through the PropertyPhoto foreign key attribute.
	 *
	 * @param      PropertyPhoto $l PropertyPhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyPhoto(PropertyPhoto $l)
	{
		if ($this->collPropertyPhotos === null) {
			$this->initPropertyPhotos();
		}
		if (!in_array($l, $this->collPropertyPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyPhotos, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related PropertyPhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getPropertyPhotosJoinPhotoType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyPhotos === null) {
			if ($this->isNew()) {
				$this->collPropertyPhotos = array();
			} else {

				$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

				$this->collPropertyPhotos = PropertyPhotoPeer::doSelectJoinPhotoType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PropertyPhotoPeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastPropertyPhotoCriteria) || !$this->lastPropertyPhotoCriteria->equals($criteria)) {
				$this->collPropertyPhotos = PropertyPhotoPeer::doSelectJoinPhotoType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPropertyPhotoCriteria = $criteria;

		return $this->collPropertyPhotos;
	}

	/**
	 * Clears out the collPropertyBlogarticles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyBlogarticles()
	 */
	public function clearPropertyBlogarticles()
	{
		$this->collPropertyBlogarticles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyBlogarticles collection (array).
	 *
	 * By default this just sets the collPropertyBlogarticles collection to an empty array (like clearcollPropertyBlogarticles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyBlogarticles()
	{
		$this->collPropertyBlogarticles = array();
	}

	/**
	 * Gets an array of PropertyBlogarticle objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyBlogarticles from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyBlogarticle[]
	 * @throws     PropelException
	 */
	public function getPropertyBlogarticles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyBlogarticles === null) {
			if ($this->isNew()) {
			   $this->collPropertyBlogarticles = array();
			} else {

				$criteria->add(PropertyBlogarticlePeer::PROPERTY_ID, $this->id);

				PropertyBlogarticlePeer::addSelectColumns($criteria);
				$this->collPropertyBlogarticles = PropertyBlogarticlePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyBlogarticlePeer::PROPERTY_ID, $this->id);

				PropertyBlogarticlePeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyBlogarticleCriteria) || !$this->lastPropertyBlogarticleCriteria->equals($criteria)) {
					$this->collPropertyBlogarticles = PropertyBlogarticlePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyBlogarticleCriteria = $criteria;
		return $this->collPropertyBlogarticles;
	}

	/**
	 * Returns the number of related PropertyBlogarticle objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyBlogarticle objects.
	 * @throws     PropelException
	 */
	public function countPropertyBlogarticles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyBlogarticles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyBlogarticlePeer::PROPERTY_ID, $this->id);

				$count = PropertyBlogarticlePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyBlogarticlePeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyBlogarticleCriteria) || !$this->lastPropertyBlogarticleCriteria->equals($criteria)) {
					$count = PropertyBlogarticlePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyBlogarticles);
				}
			} else {
				$count = count($this->collPropertyBlogarticles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyBlogarticle object to this object
	 * through the PropertyBlogarticle foreign key attribute.
	 *
	 * @param      PropertyBlogarticle $l PropertyBlogarticle
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyBlogarticle(PropertyBlogarticle $l)
	{
		if ($this->collPropertyBlogarticles === null) {
			$this->initPropertyBlogarticles();
		}
		if (!in_array($l, $this->collPropertyBlogarticles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyBlogarticles, $l);
			$l->setProperty($this);
		}
	}

	/**
	 * Clears out the collPropertyTemplates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPropertyTemplates()
	 */
	public function clearPropertyTemplates()
	{
		$this->collPropertyTemplates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPropertyTemplates collection (array).
	 *
	 * By default this just sets the collPropertyTemplates collection to an empty array (like clearcollPropertyTemplates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPropertyTemplates()
	{
		$this->collPropertyTemplates = array();
	}

	/**
	 * Gets an array of PropertyTemplate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related PropertyTemplates from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PropertyTemplate[]
	 * @throws     PropelException
	 */
	public function getPropertyTemplates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPropertyTemplates === null) {
			if ($this->isNew()) {
			   $this->collPropertyTemplates = array();
			} else {

				$criteria->add(PropertyTemplatePeer::PROPERTY_ID, $this->id);

				PropertyTemplatePeer::addSelectColumns($criteria);
				$this->collPropertyTemplates = PropertyTemplatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PropertyTemplatePeer::PROPERTY_ID, $this->id);

				PropertyTemplatePeer::addSelectColumns($criteria);
				if (!isset($this->lastPropertyTemplateCriteria) || !$this->lastPropertyTemplateCriteria->equals($criteria)) {
					$this->collPropertyTemplates = PropertyTemplatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPropertyTemplateCriteria = $criteria;
		return $this->collPropertyTemplates;
	}

	/**
	 * Returns the number of related PropertyTemplate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PropertyTemplate objects.
	 * @throws     PropelException
	 */
	public function countPropertyTemplates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPropertyTemplates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PropertyTemplatePeer::PROPERTY_ID, $this->id);

				$count = PropertyTemplatePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PropertyTemplatePeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastPropertyTemplateCriteria) || !$this->lastPropertyTemplateCriteria->equals($criteria)) {
					$count = PropertyTemplatePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPropertyTemplates);
				}
			} else {
				$count = count($this->collPropertyTemplates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PropertyTemplate object to this object
	 * through the PropertyTemplate foreign key attribute.
	 *
	 * @param      PropertyTemplate $l PropertyTemplate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPropertyTemplate(PropertyTemplate $l)
	{
		if ($this->collPropertyTemplates === null) {
			$this->initPropertyTemplates();
		}
		if (!in_array($l, $this->collPropertyTemplates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPropertyTemplates, $l);
			$l->setProperty($this);
		}
	}

	/**
	 * Clears out the collResidents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResidents()
	 */
	public function clearResidents()
	{
		$this->collResidents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResidents collection (array).
	 *
	 * By default this just sets the collResidents collection to an empty array (like clearcollResidents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResidents()
	{
		$this->collResidents = array();
	}

	/**
	 * Gets an array of Resident objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related Residents from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Resident[]
	 * @throws     PropelException
	 */
	public function getResidents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResidents === null) {
			if ($this->isNew()) {
			   $this->collResidents = array();
			} else {

				$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

				ResidentPeer::addSelectColumns($criteria);
				$this->collResidents = ResidentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

				ResidentPeer::addSelectColumns($criteria);
				if (!isset($this->lastResidentCriteria) || !$this->lastResidentCriteria->equals($criteria)) {
					$this->collResidents = ResidentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResidentCriteria = $criteria;
		return $this->collResidents;
	}

	/**
	 * Returns the number of related Resident objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Resident objects.
	 * @throws     PropelException
	 */
	public function countResidents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResidents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

				$count = ResidentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastResidentCriteria) || !$this->lastResidentCriteria->equals($criteria)) {
					$count = ResidentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collResidents);
				}
			} else {
				$count = count($this->collResidents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Resident object to this object
	 * through the Resident foreign key attribute.
	 *
	 * @param      Resident $l Resident
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResident(Resident $l)
	{
		if ($this->collResidents === null) {
			$this->initResidents();
		}
		if (!in_array($l, $this->collResidents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResidents, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related Residents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getResidentsJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResidents === null) {
			if ($this->isNew()) {
				$this->collResidents = array();
			} else {

				$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

				$this->collResidents = ResidentPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResidentPeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastResidentCriteria) || !$this->lastResidentCriteria->equals($criteria)) {
				$this->collResidents = ResidentPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastResidentCriteria = $criteria;

		return $this->collResidents;
	}

	/**
	 * Clears out the collUserPropertys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserPropertys()
	 */
	public function clearUserPropertys()
	{
		$this->collUserPropertys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserPropertys collection (array).
	 *
	 * By default this just sets the collUserPropertys collection to an empty array (like clearcollUserPropertys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserPropertys()
	{
		$this->collUserPropertys = array();
	}

	/**
	 * Gets an array of UserProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Property has previously been saved, it will retrieve
	 * related UserPropertys from storage. If this Property is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserProperty[]
	 * @throws     PropelException
	 */
	public function getUserPropertys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserPropertys === null) {
			if ($this->isNew()) {
			   $this->collUserPropertys = array();
			} else {

				$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

				UserPropertyPeer::addSelectColumns($criteria);
				$this->collUserPropertys = UserPropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

				UserPropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserPropertyCriteria) || !$this->lastUserPropertyCriteria->equals($criteria)) {
					$this->collUserPropertys = UserPropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserPropertyCriteria = $criteria;
		return $this->collUserPropertys;
	}

	/**
	 * Returns the number of related UserProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserProperty objects.
	 * @throws     PropelException
	 */
	public function countUserPropertys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserPropertys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

				$count = UserPropertyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

				if (!isset($this->lastUserPropertyCriteria) || !$this->lastUserPropertyCriteria->equals($criteria)) {
					$count = UserPropertyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserPropertys);
				}
			} else {
				$count = count($this->collUserPropertys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserProperty object to this object
	 * through the UserProperty foreign key attribute.
	 *
	 * @param      UserProperty $l UserProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserProperty(UserProperty $l)
	{
		if ($this->collUserPropertys === null) {
			$this->initUserPropertys();
		}
		if (!in_array($l, $this->collUserPropertys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserPropertys, $l);
			$l->setProperty($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Property is new, it will return
	 * an empty collection; or if this Property has previously
	 * been saved, it will retrieve related UserPropertys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Property.
	 */
	public function getUserPropertysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PropertyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserPropertys === null) {
			if ($this->isNew()) {
				$this->collUserPropertys = array();
			} else {

				$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

				$this->collUserPropertys = UserPropertyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserPropertyPeer::PROPERTY_ID, $this->id);

			if (!isset($this->lastUserPropertyCriteria) || !$this->lastUserPropertyCriteria->equals($criteria)) {
				$this->collUserPropertys = UserPropertyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserPropertyCriteria = $criteria;

		return $this->collUserPropertys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collContacts) {
				foreach ((array) $this->collContacts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyApartmentFeatures) {
				foreach ((array) $this->collPropertyApartmentFeatures as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyCommunityFeatures) {
				foreach ((array) $this->collPropertyCommunityFeatures as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyFloorplans) {
				foreach ((array) $this->collPropertyFloorplans as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyOtherFeatures) {
				foreach ((array) $this->collPropertyOtherFeatures as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyPhotos) {
				foreach ((array) $this->collPropertyPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyBlogarticles) {
				foreach ((array) $this->collPropertyBlogarticles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPropertyTemplates) {
				foreach ((array) $this->collPropertyTemplates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResidents) {
				foreach ((array) $this->collResidents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserPropertys) {
				foreach ((array) $this->collUserPropertys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collContacts = null;
		$this->collPropertyApartmentFeatures = null;
		$this->collPropertyCommunityFeatures = null;
		$this->collPropertyFloorplans = null;
		$this->collPropertyOtherFeatures = null;
		$this->collPropertyPhotos = null;
		$this->collPropertyBlogarticles = null;
		$this->collPropertyTemplates = null;
		$this->collResidents = null;
		$this->collUserPropertys = null;
			$this->aState = null;
			$this->aStatus = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProperty:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProperty::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProperty
