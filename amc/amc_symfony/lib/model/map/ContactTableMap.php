<?php


/**
 * This class defines the structure of the 'contact' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Jan 19 10:10:52 2017
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ContactTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ContactTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('contact');
		$this->setPhpName('Contact');
		$this->setClassname('Contact');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, 10, null);
		$this->addColumn('FIRST_NAME', 'FirstName', 'VARCHAR', false, 128, null);
		$this->addColumn('LAST_NAME', 'LastName', 'VARCHAR', false, 128, null);
		$this->addColumn('EMPLOYER', 'Employer', 'VARCHAR', false, 255, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 255, null);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addForeignKey('PROPERTY_ID', 'PropertyId', 'INTEGER', 'property', 'ID', true, 10, 0);
		$this->addColumn('OCCUPANTS', 'Occupants', 'VARCHAR', false, 48, null);
		$this->addColumn('PETS', 'Pets', 'VARCHAR', false, 48, null);
		$this->addColumn('WHEN', 'When', 'VARCHAR', false, 128, null);
		$this->addColumn('BEDROOMS', 'Bedrooms', 'VARCHAR', false, 48, null);
		$this->addColumn('HOWHEAR', 'Howhear', 'VARCHAR', false, 48, null);
		$this->addColumn('HOWCONTACT', 'Howcontact', 'VARCHAR', false, 48, null);
		$this->addColumn('NOTES', 'Notes', 'LONGVARCHAR', false, null, null);
		$this->addColumn('PHONE', 'Phone', 'VARCHAR', false, 48, null);
		$this->addColumn('FAX', 'Fax', 'VARCHAR', false, 48, null);
		$this->addForeignKey('CORPORATE_GROUP_ID', 'CorporateGroupId', 'INTEGER', 'corporate_group', 'ID', true, 10, 1);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Property', 'Property', RelationMap::MANY_TO_ONE, array('property_id' => 'id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('CorporateGroup', 'CorporateGroup', RelationMap::MANY_TO_ONE, array('corporate_group_id' => 'id', ), 'RESTRICT', 'RESTRICT');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // ContactTableMap
