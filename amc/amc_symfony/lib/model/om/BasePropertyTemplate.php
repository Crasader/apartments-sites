<?php

/**
 * Base class that represents a row from the 'property_template' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Jan 19 10:10:53 2017
 *
 * @package    lib.model.om
 */
abstract class BasePropertyTemplate extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PropertyTemplatePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the property_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $property_id;

	/**
	 * The value for the logo_image field.
	 * @var        string
	 */
	protected $logo_image;

	/**
	 * The value for the home_image field.
	 * @var        string
	 */
	protected $home_image;

	/**
	 * The value for the welcome field.
	 * @var        string
	 */
	protected $welcome;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the announcements field.
	 * @var        string
	 */
	protected $announcements;

	/**
	 * The value for the style_color field.
	 * @var        string
	 */
	protected $style_color;

	/**
	 * The value for the background_color field.
	 * @var        string
	 */
	protected $background_color;

	/**
	 * The value for the chat field.
	 * @var        string
	 */
	protected $chat;

	/**
	 * The value for the rentalapp_file field.
	 * @var        string
	 */
	protected $rentalapp_file;

	/**
	 * The value for the map_html field.
	 * @var        string
	 */
	protected $map_html;

	/**
	 * The value for the map_frame_src field.
	 * @var        string
	 */
	protected $map_frame_src;

	/**
	 * The value for the community_image field.
	 * @var        string
	 */
	protected $community_image;

	/**
	 * The value for the community_description field.
	 * @var        string
	 */
	protected $community_description;

	/**
	 * The value for the community_attractions_list field.
	 * @var        string
	 */
	protected $community_attractions_list;

	/**
	 * The value for the custom_page_name field.
	 * @var        string
	 */
	protected $custom_page_name;

	/**
	 * The value for the custom_page_perma_link field.
	 * @var        string
	 */
	protected $custom_page_perma_link;

	/**
	 * The value for the custom_page_content field.
	 * @var        string
	 */
	protected $custom_page_content;

	/**
	 * The value for the home_flash field.
	 * @var        string
	 */
	protected $home_flash;

	/**
	 * The value for the tracking_code field.
	 * @var        string
	 */
	protected $tracking_code;

	/**
	 * The value for the contact_email_text field.
	 * @var        string
	 */
	protected $contact_email_text;

	/**
	 * The value for the show_walkscore field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $show_walkscore;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the facebook_url field.
	 * @var        string
	 */
	protected $facebook_url;

	/**
	 * The value for the acacia_home1_desc field.
	 * @var        string
	 */
	protected $acacia_home1_desc;

	/**
	 * The value for the acacia_features_desc field.
	 * @var        string
	 */
	protected $acacia_features_desc;

	/**
	 * The value for the acacia_home2_desc field.
	 * @var        string
	 */
	protected $acacia_home2_desc;

	/**
	 * The value for the acacia_home3_desc field.
	 * @var        string
	 */
	protected $acacia_home3_desc;

	/**
	 * The value for the acacia_floorplan_desc field.
	 * @var        string
	 */
	protected $acacia_floorplan_desc;

	/**
	 * The value for the acacia_ebrochure_desc field.
	 * @var        string
	 */
	protected $acacia_ebrochure_desc;

	/**
	 * The value for the latitude field.
	 * @var        string
	 */
	protected $latitude;

	/**
	 * The value for the longitude field.
	 * @var        string
	 */
	protected $longitude;

	/**
	 * The value for the online_application_url field.
	 * @var        string
	 */
	protected $online_application_url;

	/**
	 * The value for the e_brochure field.
	 * @var        string
	 */
	protected $e_brochure;

	/**
	 * The value for the src_3dtour field.
	 * @var        string
	 */
	protected $src_3dtour;

	/**
	 * The value for the home_photo_desc field.
	 * @var        string
	 */
	protected $home_photo_desc;

	/**
	 * The value for the gmap_key field.
	 * @var        string
	 */
	protected $gmap_key;

	/**
	 * @var        Property
	 */
	protected $aProperty;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PropertyTemplatePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->property_id = 0;
		$this->show_walkscore = true;
	}

	/**
	 * Initializes internal state of BasePropertyTemplate object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [property_id] column value.
	 * 
	 * @return     int
	 */
	public function getPropertyId()
	{
		return $this->property_id;
	}

	/**
	 * Get the [logo_image] column value.
	 * 
	 * @return     string
	 */
	public function getLogoImage()
	{
		return $this->logo_image;
	}

	/**
	 * Get the [home_image] column value.
	 * 
	 * @return     string
	 */
	public function getHomeImage()
	{
		return $this->home_image;
	}

	/**
	 * Get the [welcome] column value.
	 * 
	 * @return     string
	 */
	public function getWelcome()
	{
		return $this->welcome;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [announcements] column value.
	 * 
	 * @return     string
	 */
	public function getAnnouncements()
	{
		return $this->announcements;
	}

	/**
	 * Get the [style_color] column value.
	 * 
	 * @return     string
	 */
	public function getStyleColor()
	{
		return $this->style_color;
	}

	/**
	 * Get the [background_color] column value.
	 * 
	 * @return     string
	 */
	public function getBackgroundColor()
	{
		return $this->background_color;
	}

	/**
	 * Get the [chat] column value.
	 * 
	 * @return     string
	 */
	public function getChat()
	{
		return $this->chat;
	}

	/**
	 * Get the [rentalapp_file] column value.
	 * 
	 * @return     string
	 */
	public function getRentalappFile()
	{
		return $this->rentalapp_file;
	}

	/**
	 * Get the [map_html] column value.
	 * 
	 * @return     string
	 */
	public function getMapHtml()
	{
		return $this->map_html;
	}

	/**
	 * Get the [map_frame_src] column value.
	 * 
	 * @return     string
	 */
	public function getMapFrameSrc()
	{
		return $this->map_frame_src;
	}

	/**
	 * Get the [community_image] column value.
	 * 
	 * @return     string
	 */
	public function getCommunityImage()
	{
		return $this->community_image;
	}

	/**
	 * Get the [community_description] column value.
	 * 
	 * @return     string
	 */
	public function getCommunityDescription()
	{
		return $this->community_description;
	}

	/**
	 * Get the [community_attractions_list] column value.
	 * 
	 * @return     string
	 */
	public function getCommunityAttractionsList()
	{
		return $this->community_attractions_list;
	}

	/**
	 * Get the [custom_page_name] column value.
	 * 
	 * @return     string
	 */
	public function getCustomPageName()
	{
		return $this->custom_page_name;
	}

	/**
	 * Get the [custom_page_perma_link] column value.
	 * 
	 * @return     string
	 */
	public function getCustomPagePermaLink()
	{
		return $this->custom_page_perma_link;
	}

	/**
	 * Get the [custom_page_content] column value.
	 * 
	 * @return     string
	 */
	public function getCustomPageContent()
	{
		return $this->custom_page_content;
	}

	/**
	 * Get the [home_flash] column value.
	 * 
	 * @return     string
	 */
	public function getHomeFlash()
	{
		return $this->home_flash;
	}

	/**
	 * Get the [tracking_code] column value.
	 * 
	 * @return     string
	 */
	public function getTrackingCode()
	{
		return $this->tracking_code;
	}

	/**
	 * Get the [contact_email_text] column value.
	 * 
	 * @return     string
	 */
	public function getContactEmailText()
	{
		return $this->contact_email_text;
	}

	/**
	 * Get the [show_walkscore] column value.
	 * 
	 * @return     boolean
	 */
	public function getShowWalkscore()
	{
		return $this->show_walkscore;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [facebook_url] column value.
	 * 
	 * @return     string
	 */
	public function getFacebookUrl()
	{
		return $this->facebook_url;
	}

	/**
	 * Get the [acacia_home1_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaHome1Desc()
	{
		return $this->acacia_home1_desc;
	}

	/**
	 * Get the [acacia_features_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaFeaturesDesc()
	{
		return $this->acacia_features_desc;
	}

	/**
	 * Get the [acacia_home2_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaHome2Desc()
	{
		return $this->acacia_home2_desc;
	}

	/**
	 * Get the [acacia_home3_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaHome3Desc()
	{
		return $this->acacia_home3_desc;
	}

	/**
	 * Get the [acacia_floorplan_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaFloorplanDesc()
	{
		return $this->acacia_floorplan_desc;
	}

	/**
	 * Get the [acacia_ebrochure_desc] column value.
	 * 
	 * @return     string
	 */
	public function getAcaciaEbrochureDesc()
	{
		return $this->acacia_ebrochure_desc;
	}

	/**
	 * Get the [latitude] column value.
	 * 
	 * @return     string
	 */
	public function getLatitude()
	{
		return $this->latitude;
	}

	/**
	 * Get the [longitude] column value.
	 * 
	 * @return     string
	 */
	public function getLongitude()
	{
		return $this->longitude;
	}

	/**
	 * Get the [online_application_url] column value.
	 * 
	 * @return     string
	 */
	public function getOnlineApplicationUrl()
	{
		return $this->online_application_url;
	}

	/**
	 * Get the [e_brochure] column value.
	 * 
	 * @return     string
	 */
	public function getEBrochure()
	{
		return $this->e_brochure;
	}

	/**
	 * Get the [src_3dtour] column value.
	 * 
	 * @return     string
	 */
	public function getSrc3dtour()
	{
		return $this->src_3dtour;
	}

	/**
	 * Get the [home_photo_desc] column value.
	 * 
	 * @return     string
	 */
	public function getHomePhotoDesc()
	{
		return $this->home_photo_desc;
	}

	/**
	 * Get the [gmap_key] column value.
	 * 
	 * @return     string
	 */
	public function getGmapKey()
	{
		return $this->gmap_key;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [property_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setPropertyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->property_id !== $v || $this->isNew()) {
			$this->property_id = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::PROPERTY_ID;
		}

		if ($this->aProperty !== null && $this->aProperty->getId() !== $v) {
			$this->aProperty = null;
		}

		return $this;
	} // setPropertyId()

	/**
	 * Set the value of [logo_image] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setLogoImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logo_image !== $v) {
			$this->logo_image = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::LOGO_IMAGE;
		}

		return $this;
	} // setLogoImage()

	/**
	 * Set the value of [home_image] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setHomeImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_image !== $v) {
			$this->home_image = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::HOME_IMAGE;
		}

		return $this;
	} // setHomeImage()

	/**
	 * Set the value of [welcome] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setWelcome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->welcome !== $v) {
			$this->welcome = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::WELCOME;
		}

		return $this;
	} // setWelcome()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [announcements] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAnnouncements($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->announcements !== $v) {
			$this->announcements = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ANNOUNCEMENTS;
		}

		return $this;
	} // setAnnouncements()

	/**
	 * Set the value of [style_color] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setStyleColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->style_color !== $v) {
			$this->style_color = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::STYLE_COLOR;
		}

		return $this;
	} // setStyleColor()

	/**
	 * Set the value of [background_color] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setBackgroundColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->background_color !== $v) {
			$this->background_color = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::BACKGROUND_COLOR;
		}

		return $this;
	} // setBackgroundColor()

	/**
	 * Set the value of [chat] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setChat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->chat !== $v) {
			$this->chat = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::CHAT;
		}

		return $this;
	} // setChat()

	/**
	 * Set the value of [rentalapp_file] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setRentalappFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rentalapp_file !== $v) {
			$this->rentalapp_file = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::RENTALAPP_FILE;
		}

		return $this;
	} // setRentalappFile()

	/**
	 * Set the value of [map_html] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setMapHtml($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->map_html !== $v) {
			$this->map_html = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::MAP_HTML;
		}

		return $this;
	} // setMapHtml()

	/**
	 * Set the value of [map_frame_src] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setMapFrameSrc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->map_frame_src !== $v) {
			$this->map_frame_src = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::MAP_FRAME_SRC;
		}

		return $this;
	} // setMapFrameSrc()

	/**
	 * Set the value of [community_image] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCommunityImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->community_image !== $v) {
			$this->community_image = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::COMMUNITY_IMAGE;
		}

		return $this;
	} // setCommunityImage()

	/**
	 * Set the value of [community_description] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCommunityDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->community_description !== $v) {
			$this->community_description = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::COMMUNITY_DESCRIPTION;
		}

		return $this;
	} // setCommunityDescription()

	/**
	 * Set the value of [community_attractions_list] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCommunityAttractionsList($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->community_attractions_list !== $v) {
			$this->community_attractions_list = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::COMMUNITY_ATTRACTIONS_LIST;
		}

		return $this;
	} // setCommunityAttractionsList()

	/**
	 * Set the value of [custom_page_name] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCustomPageName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_page_name !== $v) {
			$this->custom_page_name = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::CUSTOM_PAGE_NAME;
		}

		return $this;
	} // setCustomPageName()

	/**
	 * Set the value of [custom_page_perma_link] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCustomPagePermaLink($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_page_perma_link !== $v) {
			$this->custom_page_perma_link = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::CUSTOM_PAGE_PERMA_LINK;
		}

		return $this;
	} // setCustomPagePermaLink()

	/**
	 * Set the value of [custom_page_content] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setCustomPageContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_page_content !== $v) {
			$this->custom_page_content = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::CUSTOM_PAGE_CONTENT;
		}

		return $this;
	} // setCustomPageContent()

	/**
	 * Set the value of [home_flash] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setHomeFlash($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_flash !== $v) {
			$this->home_flash = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::HOME_FLASH;
		}

		return $this;
	} // setHomeFlash()

	/**
	 * Set the value of [tracking_code] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setTrackingCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tracking_code !== $v) {
			$this->tracking_code = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::TRACKING_CODE;
		}

		return $this;
	} // setTrackingCode()

	/**
	 * Set the value of [contact_email_text] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setContactEmailText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_email_text !== $v) {
			$this->contact_email_text = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::CONTACT_EMAIL_TEXT;
		}

		return $this;
	} // setContactEmailText()

	/**
	 * Set the value of [show_walkscore] column.
	 * 
	 * @param      boolean $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setShowWalkscore($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->show_walkscore !== $v || $this->isNew()) {
			$this->show_walkscore = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::SHOW_WALKSCORE;
		}

		return $this;
	} // setShowWalkscore()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [facebook_url] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setFacebookUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facebook_url !== $v) {
			$this->facebook_url = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::FACEBOOK_URL;
		}

		return $this;
	} // setFacebookUrl()

	/**
	 * Set the value of [acacia_home1_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaHome1Desc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_home1_desc !== $v) {
			$this->acacia_home1_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_HOME1_DESC;
		}

		return $this;
	} // setAcaciaHome1Desc()

	/**
	 * Set the value of [acacia_features_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaFeaturesDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_features_desc !== $v) {
			$this->acacia_features_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_FEATURES_DESC;
		}

		return $this;
	} // setAcaciaFeaturesDesc()

	/**
	 * Set the value of [acacia_home2_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaHome2Desc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_home2_desc !== $v) {
			$this->acacia_home2_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_HOME2_DESC;
		}

		return $this;
	} // setAcaciaHome2Desc()

	/**
	 * Set the value of [acacia_home3_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaHome3Desc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_home3_desc !== $v) {
			$this->acacia_home3_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_HOME3_DESC;
		}

		return $this;
	} // setAcaciaHome3Desc()

	/**
	 * Set the value of [acacia_floorplan_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaFloorplanDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_floorplan_desc !== $v) {
			$this->acacia_floorplan_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_FLOORPLAN_DESC;
		}

		return $this;
	} // setAcaciaFloorplanDesc()

	/**
	 * Set the value of [acacia_ebrochure_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setAcaciaEbrochureDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acacia_ebrochure_desc !== $v) {
			$this->acacia_ebrochure_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ACACIA_EBROCHURE_DESC;
		}

		return $this;
	} // setAcaciaEbrochureDesc()

	/**
	 * Set the value of [latitude] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setLatitude($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->latitude !== $v) {
			$this->latitude = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::LATITUDE;
		}

		return $this;
	} // setLatitude()

	/**
	 * Set the value of [longitude] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setLongitude($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->longitude !== $v) {
			$this->longitude = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::LONGITUDE;
		}

		return $this;
	} // setLongitude()

	/**
	 * Set the value of [online_application_url] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setOnlineApplicationUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->online_application_url !== $v) {
			$this->online_application_url = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::ONLINE_APPLICATION_URL;
		}

		return $this;
	} // setOnlineApplicationUrl()

	/**
	 * Set the value of [e_brochure] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setEBrochure($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->e_brochure !== $v) {
			$this->e_brochure = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::E_BROCHURE;
		}

		return $this;
	} // setEBrochure()

	/**
	 * Set the value of [src_3dtour] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setSrc3dtour($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->src_3dtour !== $v) {
			$this->src_3dtour = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::SRC_3DTOUR;
		}

		return $this;
	} // setSrc3dtour()

	/**
	 * Set the value of [home_photo_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setHomePhotoDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_photo_desc !== $v) {
			$this->home_photo_desc = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::HOME_PHOTO_DESC;
		}

		return $this;
	} // setHomePhotoDesc()

	/**
	 * Set the value of [gmap_key] column.
	 * 
	 * @param      string $v new value
	 * @return     PropertyTemplate The current object (for fluent API support)
	 */
	public function setGmapKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gmap_key !== $v) {
			$this->gmap_key = $v;
			$this->modifiedColumns[] = PropertyTemplatePeer::GMAP_KEY;
		}

		return $this;
	} // setGmapKey()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->property_id !== 0) {
				return false;
			}

			if ($this->show_walkscore !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->property_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->logo_image = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->home_image = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->welcome = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->description = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->announcements = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->style_color = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->background_color = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->chat = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->rentalapp_file = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->map_html = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->map_frame_src = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->community_image = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->community_description = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->community_attractions_list = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->custom_page_name = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->custom_page_perma_link = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->custom_page_content = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->home_flash = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->tracking_code = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->contact_email_text = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->show_walkscore = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->email = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->facebook_url = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->acacia_home1_desc = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->acacia_features_desc = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->acacia_home2_desc = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->acacia_home3_desc = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->acacia_floorplan_desc = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->acacia_ebrochure_desc = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->latitude = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->longitude = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->online_application_url = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->e_brochure = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->src_3dtour = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->home_photo_desc = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->gmap_key = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 38; // 38 = PropertyTemplatePeer::NUM_COLUMNS - PropertyTemplatePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PropertyTemplate object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProperty !== null && $this->property_id !== $this->aProperty->getId()) {
			$this->aProperty = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyTemplatePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PropertyTemplatePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProperty = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyTemplatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePropertyTemplate:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PropertyTemplatePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePropertyTemplate:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyTemplatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePropertyTemplate:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePropertyTemplate:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PropertyTemplatePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProperty !== null) {
				if ($this->aProperty->isModified() || $this->aProperty->isNew()) {
					$affectedRows += $this->aProperty->save($con);
				}
				$this->setProperty($this->aProperty);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PropertyTemplatePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PropertyTemplatePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PropertyTemplatePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProperty !== null) {
				if (!$this->aProperty->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProperty->getValidationFailures());
				}
			}


			if (($retval = PropertyTemplatePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyTemplatePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPropertyId();
				break;
			case 2:
				return $this->getLogoImage();
				break;
			case 3:
				return $this->getHomeImage();
				break;
			case 4:
				return $this->getWelcome();
				break;
			case 5:
				return $this->getDescription();
				break;
			case 6:
				return $this->getAnnouncements();
				break;
			case 7:
				return $this->getStyleColor();
				break;
			case 8:
				return $this->getBackgroundColor();
				break;
			case 9:
				return $this->getChat();
				break;
			case 10:
				return $this->getRentalappFile();
				break;
			case 11:
				return $this->getMapHtml();
				break;
			case 12:
				return $this->getMapFrameSrc();
				break;
			case 13:
				return $this->getCommunityImage();
				break;
			case 14:
				return $this->getCommunityDescription();
				break;
			case 15:
				return $this->getCommunityAttractionsList();
				break;
			case 16:
				return $this->getCustomPageName();
				break;
			case 17:
				return $this->getCustomPagePermaLink();
				break;
			case 18:
				return $this->getCustomPageContent();
				break;
			case 19:
				return $this->getHomeFlash();
				break;
			case 20:
				return $this->getTrackingCode();
				break;
			case 21:
				return $this->getContactEmailText();
				break;
			case 22:
				return $this->getShowWalkscore();
				break;
			case 23:
				return $this->getEmail();
				break;
			case 24:
				return $this->getFacebookUrl();
				break;
			case 25:
				return $this->getAcaciaHome1Desc();
				break;
			case 26:
				return $this->getAcaciaFeaturesDesc();
				break;
			case 27:
				return $this->getAcaciaHome2Desc();
				break;
			case 28:
				return $this->getAcaciaHome3Desc();
				break;
			case 29:
				return $this->getAcaciaFloorplanDesc();
				break;
			case 30:
				return $this->getAcaciaEbrochureDesc();
				break;
			case 31:
				return $this->getLatitude();
				break;
			case 32:
				return $this->getLongitude();
				break;
			case 33:
				return $this->getOnlineApplicationUrl();
				break;
			case 34:
				return $this->getEBrochure();
				break;
			case 35:
				return $this->getSrc3dtour();
				break;
			case 36:
				return $this->getHomePhotoDesc();
				break;
			case 37:
				return $this->getGmapKey();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PropertyTemplatePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPropertyId(),
			$keys[2] => $this->getLogoImage(),
			$keys[3] => $this->getHomeImage(),
			$keys[4] => $this->getWelcome(),
			$keys[5] => $this->getDescription(),
			$keys[6] => $this->getAnnouncements(),
			$keys[7] => $this->getStyleColor(),
			$keys[8] => $this->getBackgroundColor(),
			$keys[9] => $this->getChat(),
			$keys[10] => $this->getRentalappFile(),
			$keys[11] => $this->getMapHtml(),
			$keys[12] => $this->getMapFrameSrc(),
			$keys[13] => $this->getCommunityImage(),
			$keys[14] => $this->getCommunityDescription(),
			$keys[15] => $this->getCommunityAttractionsList(),
			$keys[16] => $this->getCustomPageName(),
			$keys[17] => $this->getCustomPagePermaLink(),
			$keys[18] => $this->getCustomPageContent(),
			$keys[19] => $this->getHomeFlash(),
			$keys[20] => $this->getTrackingCode(),
			$keys[21] => $this->getContactEmailText(),
			$keys[22] => $this->getShowWalkscore(),
			$keys[23] => $this->getEmail(),
			$keys[24] => $this->getFacebookUrl(),
			$keys[25] => $this->getAcaciaHome1Desc(),
			$keys[26] => $this->getAcaciaFeaturesDesc(),
			$keys[27] => $this->getAcaciaHome2Desc(),
			$keys[28] => $this->getAcaciaHome3Desc(),
			$keys[29] => $this->getAcaciaFloorplanDesc(),
			$keys[30] => $this->getAcaciaEbrochureDesc(),
			$keys[31] => $this->getLatitude(),
			$keys[32] => $this->getLongitude(),
			$keys[33] => $this->getOnlineApplicationUrl(),
			$keys[34] => $this->getEBrochure(),
			$keys[35] => $this->getSrc3dtour(),
			$keys[36] => $this->getHomePhotoDesc(),
			$keys[37] => $this->getGmapKey(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyTemplatePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPropertyId($value);
				break;
			case 2:
				$this->setLogoImage($value);
				break;
			case 3:
				$this->setHomeImage($value);
				break;
			case 4:
				$this->setWelcome($value);
				break;
			case 5:
				$this->setDescription($value);
				break;
			case 6:
				$this->setAnnouncements($value);
				break;
			case 7:
				$this->setStyleColor($value);
				break;
			case 8:
				$this->setBackgroundColor($value);
				break;
			case 9:
				$this->setChat($value);
				break;
			case 10:
				$this->setRentalappFile($value);
				break;
			case 11:
				$this->setMapHtml($value);
				break;
			case 12:
				$this->setMapFrameSrc($value);
				break;
			case 13:
				$this->setCommunityImage($value);
				break;
			case 14:
				$this->setCommunityDescription($value);
				break;
			case 15:
				$this->setCommunityAttractionsList($value);
				break;
			case 16:
				$this->setCustomPageName($value);
				break;
			case 17:
				$this->setCustomPagePermaLink($value);
				break;
			case 18:
				$this->setCustomPageContent($value);
				break;
			case 19:
				$this->setHomeFlash($value);
				break;
			case 20:
				$this->setTrackingCode($value);
				break;
			case 21:
				$this->setContactEmailText($value);
				break;
			case 22:
				$this->setShowWalkscore($value);
				break;
			case 23:
				$this->setEmail($value);
				break;
			case 24:
				$this->setFacebookUrl($value);
				break;
			case 25:
				$this->setAcaciaHome1Desc($value);
				break;
			case 26:
				$this->setAcaciaFeaturesDesc($value);
				break;
			case 27:
				$this->setAcaciaHome2Desc($value);
				break;
			case 28:
				$this->setAcaciaHome3Desc($value);
				break;
			case 29:
				$this->setAcaciaFloorplanDesc($value);
				break;
			case 30:
				$this->setAcaciaEbrochureDesc($value);
				break;
			case 31:
				$this->setLatitude($value);
				break;
			case 32:
				$this->setLongitude($value);
				break;
			case 33:
				$this->setOnlineApplicationUrl($value);
				break;
			case 34:
				$this->setEBrochure($value);
				break;
			case 35:
				$this->setSrc3dtour($value);
				break;
			case 36:
				$this->setHomePhotoDesc($value);
				break;
			case 37:
				$this->setGmapKey($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PropertyTemplatePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPropertyId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLogoImage($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setHomeImage($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setWelcome($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDescription($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAnnouncements($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setStyleColor($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setBackgroundColor($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setChat($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRentalappFile($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setMapHtml($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMapFrameSrc($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCommunityImage($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCommunityDescription($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCommunityAttractionsList($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCustomPageName($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCustomPagePermaLink($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCustomPageContent($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setHomeFlash($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTrackingCode($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setContactEmailText($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setShowWalkscore($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setEmail($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFacebookUrl($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setAcaciaHome1Desc($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setAcaciaFeaturesDesc($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setAcaciaHome2Desc($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setAcaciaHome3Desc($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setAcaciaFloorplanDesc($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setAcaciaEbrochureDesc($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setLatitude($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setLongitude($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setOnlineApplicationUrl($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setEBrochure($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setSrc3dtour($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setHomePhotoDesc($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setGmapKey($arr[$keys[37]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PropertyTemplatePeer::DATABASE_NAME);

		if ($this->isColumnModified(PropertyTemplatePeer::ID)) $criteria->add(PropertyTemplatePeer::ID, $this->id);
		if ($this->isColumnModified(PropertyTemplatePeer::PROPERTY_ID)) $criteria->add(PropertyTemplatePeer::PROPERTY_ID, $this->property_id);
		if ($this->isColumnModified(PropertyTemplatePeer::LOGO_IMAGE)) $criteria->add(PropertyTemplatePeer::LOGO_IMAGE, $this->logo_image);
		if ($this->isColumnModified(PropertyTemplatePeer::HOME_IMAGE)) $criteria->add(PropertyTemplatePeer::HOME_IMAGE, $this->home_image);
		if ($this->isColumnModified(PropertyTemplatePeer::WELCOME)) $criteria->add(PropertyTemplatePeer::WELCOME, $this->welcome);
		if ($this->isColumnModified(PropertyTemplatePeer::DESCRIPTION)) $criteria->add(PropertyTemplatePeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(PropertyTemplatePeer::ANNOUNCEMENTS)) $criteria->add(PropertyTemplatePeer::ANNOUNCEMENTS, $this->announcements);
		if ($this->isColumnModified(PropertyTemplatePeer::STYLE_COLOR)) $criteria->add(PropertyTemplatePeer::STYLE_COLOR, $this->style_color);
		if ($this->isColumnModified(PropertyTemplatePeer::BACKGROUND_COLOR)) $criteria->add(PropertyTemplatePeer::BACKGROUND_COLOR, $this->background_color);
		if ($this->isColumnModified(PropertyTemplatePeer::CHAT)) $criteria->add(PropertyTemplatePeer::CHAT, $this->chat);
		if ($this->isColumnModified(PropertyTemplatePeer::RENTALAPP_FILE)) $criteria->add(PropertyTemplatePeer::RENTALAPP_FILE, $this->rentalapp_file);
		if ($this->isColumnModified(PropertyTemplatePeer::MAP_HTML)) $criteria->add(PropertyTemplatePeer::MAP_HTML, $this->map_html);
		if ($this->isColumnModified(PropertyTemplatePeer::MAP_FRAME_SRC)) $criteria->add(PropertyTemplatePeer::MAP_FRAME_SRC, $this->map_frame_src);
		if ($this->isColumnModified(PropertyTemplatePeer::COMMUNITY_IMAGE)) $criteria->add(PropertyTemplatePeer::COMMUNITY_IMAGE, $this->community_image);
		if ($this->isColumnModified(PropertyTemplatePeer::COMMUNITY_DESCRIPTION)) $criteria->add(PropertyTemplatePeer::COMMUNITY_DESCRIPTION, $this->community_description);
		if ($this->isColumnModified(PropertyTemplatePeer::COMMUNITY_ATTRACTIONS_LIST)) $criteria->add(PropertyTemplatePeer::COMMUNITY_ATTRACTIONS_LIST, $this->community_attractions_list);
		if ($this->isColumnModified(PropertyTemplatePeer::CUSTOM_PAGE_NAME)) $criteria->add(PropertyTemplatePeer::CUSTOM_PAGE_NAME, $this->custom_page_name);
		if ($this->isColumnModified(PropertyTemplatePeer::CUSTOM_PAGE_PERMA_LINK)) $criteria->add(PropertyTemplatePeer::CUSTOM_PAGE_PERMA_LINK, $this->custom_page_perma_link);
		if ($this->isColumnModified(PropertyTemplatePeer::CUSTOM_PAGE_CONTENT)) $criteria->add(PropertyTemplatePeer::CUSTOM_PAGE_CONTENT, $this->custom_page_content);
		if ($this->isColumnModified(PropertyTemplatePeer::HOME_FLASH)) $criteria->add(PropertyTemplatePeer::HOME_FLASH, $this->home_flash);
		if ($this->isColumnModified(PropertyTemplatePeer::TRACKING_CODE)) $criteria->add(PropertyTemplatePeer::TRACKING_CODE, $this->tracking_code);
		if ($this->isColumnModified(PropertyTemplatePeer::CONTACT_EMAIL_TEXT)) $criteria->add(PropertyTemplatePeer::CONTACT_EMAIL_TEXT, $this->contact_email_text);
		if ($this->isColumnModified(PropertyTemplatePeer::SHOW_WALKSCORE)) $criteria->add(PropertyTemplatePeer::SHOW_WALKSCORE, $this->show_walkscore);
		if ($this->isColumnModified(PropertyTemplatePeer::EMAIL)) $criteria->add(PropertyTemplatePeer::EMAIL, $this->email);
		if ($this->isColumnModified(PropertyTemplatePeer::FACEBOOK_URL)) $criteria->add(PropertyTemplatePeer::FACEBOOK_URL, $this->facebook_url);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_HOME1_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_HOME1_DESC, $this->acacia_home1_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_FEATURES_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_FEATURES_DESC, $this->acacia_features_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_HOME2_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_HOME2_DESC, $this->acacia_home2_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_HOME3_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_HOME3_DESC, $this->acacia_home3_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_FLOORPLAN_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_FLOORPLAN_DESC, $this->acacia_floorplan_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::ACACIA_EBROCHURE_DESC)) $criteria->add(PropertyTemplatePeer::ACACIA_EBROCHURE_DESC, $this->acacia_ebrochure_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::LATITUDE)) $criteria->add(PropertyTemplatePeer::LATITUDE, $this->latitude);
		if ($this->isColumnModified(PropertyTemplatePeer::LONGITUDE)) $criteria->add(PropertyTemplatePeer::LONGITUDE, $this->longitude);
		if ($this->isColumnModified(PropertyTemplatePeer::ONLINE_APPLICATION_URL)) $criteria->add(PropertyTemplatePeer::ONLINE_APPLICATION_URL, $this->online_application_url);
		if ($this->isColumnModified(PropertyTemplatePeer::E_BROCHURE)) $criteria->add(PropertyTemplatePeer::E_BROCHURE, $this->e_brochure);
		if ($this->isColumnModified(PropertyTemplatePeer::SRC_3DTOUR)) $criteria->add(PropertyTemplatePeer::SRC_3DTOUR, $this->src_3dtour);
		if ($this->isColumnModified(PropertyTemplatePeer::HOME_PHOTO_DESC)) $criteria->add(PropertyTemplatePeer::HOME_PHOTO_DESC, $this->home_photo_desc);
		if ($this->isColumnModified(PropertyTemplatePeer::GMAP_KEY)) $criteria->add(PropertyTemplatePeer::GMAP_KEY, $this->gmap_key);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PropertyTemplatePeer::DATABASE_NAME);

		$criteria->add(PropertyTemplatePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PropertyTemplate (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPropertyId($this->property_id);

		$copyObj->setLogoImage($this->logo_image);

		$copyObj->setHomeImage($this->home_image);

		$copyObj->setWelcome($this->welcome);

		$copyObj->setDescription($this->description);

		$copyObj->setAnnouncements($this->announcements);

		$copyObj->setStyleColor($this->style_color);

		$copyObj->setBackgroundColor($this->background_color);

		$copyObj->setChat($this->chat);

		$copyObj->setRentalappFile($this->rentalapp_file);

		$copyObj->setMapHtml($this->map_html);

		$copyObj->setMapFrameSrc($this->map_frame_src);

		$copyObj->setCommunityImage($this->community_image);

		$copyObj->setCommunityDescription($this->community_description);

		$copyObj->setCommunityAttractionsList($this->community_attractions_list);

		$copyObj->setCustomPageName($this->custom_page_name);

		$copyObj->setCustomPagePermaLink($this->custom_page_perma_link);

		$copyObj->setCustomPageContent($this->custom_page_content);

		$copyObj->setHomeFlash($this->home_flash);

		$copyObj->setTrackingCode($this->tracking_code);

		$copyObj->setContactEmailText($this->contact_email_text);

		$copyObj->setShowWalkscore($this->show_walkscore);

		$copyObj->setEmail($this->email);

		$copyObj->setFacebookUrl($this->facebook_url);

		$copyObj->setAcaciaHome1Desc($this->acacia_home1_desc);

		$copyObj->setAcaciaFeaturesDesc($this->acacia_features_desc);

		$copyObj->setAcaciaHome2Desc($this->acacia_home2_desc);

		$copyObj->setAcaciaHome3Desc($this->acacia_home3_desc);

		$copyObj->setAcaciaFloorplanDesc($this->acacia_floorplan_desc);

		$copyObj->setAcaciaEbrochureDesc($this->acacia_ebrochure_desc);

		$copyObj->setLatitude($this->latitude);

		$copyObj->setLongitude($this->longitude);

		$copyObj->setOnlineApplicationUrl($this->online_application_url);

		$copyObj->setEBrochure($this->e_brochure);

		$copyObj->setSrc3dtour($this->src_3dtour);

		$copyObj->setHomePhotoDesc($this->home_photo_desc);

		$copyObj->setGmapKey($this->gmap_key);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PropertyTemplate Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PropertyTemplatePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PropertyTemplatePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Property object.
	 *
	 * @param      Property $v
	 * @return     PropertyTemplate The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProperty(Property $v = null)
	{
		if ($v === null) {
			$this->setPropertyId(0);
		} else {
			$this->setPropertyId($v->getId());
		}

		$this->aProperty = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Property object, it will not be re-added.
		if ($v !== null) {
			$v->addPropertyTemplate($this);
		}

		return $this;
	}


	/**
	 * Get the associated Property object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Property The associated Property object.
	 * @throws     PropelException
	 */
	public function getProperty(PropelPDO $con = null)
	{
		if ($this->aProperty === null && ($this->property_id !== null)) {
			$this->aProperty = PropertyPeer::retrieveByPk($this->property_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProperty->addPropertyTemplates($this);
			 */
		}
		return $this->aProperty;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aProperty = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePropertyTemplate:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePropertyTemplate::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePropertyTemplate
