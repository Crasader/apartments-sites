<?php


/**
 * This class defines the structure of the 'property' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Sep  9 21:40:32 2012
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PropertyTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PropertyTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('property');
		$this->setPhpName('Property');
		$this->setClassname('Property');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, 10, null);
		$this->addColumn('CODE', 'Code', 'VARCHAR', true, 50, '');
		$this->addColumn('NAME', 'Name', 'VARCHAR', true, 50, '');
		$this->addColumn('ADDRESS', 'Address', 'VARCHAR', true, 128, '');
		$this->addColumn('CITY', 'City', 'VARCHAR', true, 50, '');
		$this->addForeignKey('STATE_ID', 'StateId', 'INTEGER', 'state', 'ID', true, 10, 0);
		$this->addColumn('ZIP', 'Zip', 'VARCHAR', true, 20, '');
		$this->addColumn('PHONE', 'Phone', 'VARCHAR', true, 20, '');
		$this->addColumn('FAX', 'Fax', 'VARCHAR', true, 20, '');
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', true, 128, '');
		$this->addColumn('IMAGE', 'Image', 'VARCHAR', true, 50, '');
		$this->addColumn('URL', 'Url', 'VARCHAR', true, 150, '');
		$this->addColumn('PRICE_RANGE', 'PriceRange', 'VARCHAR', true, 50, '');
		$this->addColumn('UNIT_TYPE', 'UnitType', 'VARCHAR', true, 50, '');
		$this->addColumn('SPECIAL', 'Special', 'VARCHAR', true, 100, '');
		$this->addColumn('MERCIAL', 'Mercial', 'VARCHAR', true, 150, '');
		$this->addColumn('DESCRIPTION', 'Description', 'LONGVARCHAR', true, null, null);
		$this->addColumn('HOURS', 'Hours', 'LONGVARCHAR', true, null, null);
		$this->addColumn('PET_POLICY', 'PetPolicy', 'LONGVARCHAR', true, null, null);
		$this->addColumn('DIRECTIONS', 'Directions', 'LONGVARCHAR', true, null, null);
		$this->addColumn('FEATURED', 'Featured', 'BOOLEAN', true, 1, false);
		$this->addForeignKey('STATUS_ID', 'StatusId', 'INTEGER', 'status', 'ID', true, 10, 0);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('State', 'State', RelationMap::MANY_TO_ONE, array('state_id' => 'id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('Status', 'Status', RelationMap::MANY_TO_ONE, array('status_id' => 'id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('Contact', 'Contact', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('PropertyApartmentFeature', 'PropertyApartmentFeature', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyCommunityFeature', 'PropertyCommunityFeature', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyFloorplan', 'PropertyFloorplan', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyOtherFeature', 'PropertyOtherFeature', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyPhoto', 'PropertyPhoto', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyBlogarticle', 'PropertyBlogarticle', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('PropertyTemplate', 'PropertyTemplate', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('Resident', 'Resident', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('UserProperty', 'UserProperty', RelationMap::ONE_TO_MANY, array('id' => 'property_id', ), 'CASCADE', 'CASCADE');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // PropertyTableMap
